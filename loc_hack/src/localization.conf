start on ( started filesystems_userstore and started filesystems_var_local ) or starting x
stop on stopping filesystems_userstore or stopping filesystems_var_local

export LANG LC_ALL

env REBOOT_LIMIT=2

pre-start script
    source /etc/upstart/functions
    
    USERROOT="/mnt/base-us/localization"
    LOCALROOT="/var/local/localization"
    RSYNC="/mnt/us/localization/rsync"

    if [ ! -d "$USERROOT" ]
    then
        exit 1
    fi

    if [ -f "$USERROOT/debug.log" ]
    then
        exec 2>>"$USERROOT/debug.log"
        set -vx
    fi

    V=$(sed -ne 's/-/ /gp' /etc/version.txt|awk '/Version:/ { print $6 " " $4 }')
    if [ "$V" != "218732 002" -a "$V" != "215573 032" ]
    then
        echo "[$(date +'%F %T')] Incorrect firmware version $V, exiting to prevent unexpected results" >> "$USERROOT"/error.log
        echo "[$(date +'%F %T')] This localization pack is for firmwares 5.4.2 and 5.4.2.1 only" >> "$USERROOT"/error.log
        exit 1
    fi

    REBOOTS=$(cat /var/local/upstart/mesquite.restarts || true)
    if [ "$REBOOTS" -gt "$REBOOT_LIMIT" ]
    then
        rm -f /var/local/upstart/mesquite.restarts || true
        rm -f /var/run/upstart/mesquite.restarts || true
        echo "[$(date +'%F %T')] Kindle seems to have problems, exiting to enable recovery" >> "$USERROOT"/error.log
        exit 1
    fi

    UDIR=$(dirname `kdb get system/driver/charger/SYS_CHARGING_FILE || true` || true)
    CABLE_CONNECTED=$(cat $UDIR/connected || true)
    if [ "$CABLE_CONNECTED" == 1 ]
    then
        echo "[$(date +'%F %T')] Kindle connected to USB, activating safety net - exiting to enable recovery" >> "$USERROOT"/error.log
        exit 1
    fi

    if [ $(df /var/local | awk 'NR==2 {print $4}') -lt 10000 ]
    then
        echo "[$(date +'%F %T')] Less than 10 MB available in /var/local/, exiting" >> "$USERROOT"/error.log
        exit 1
    fi

    $RSYNC -auzp --delete --chmod=a-x,D+X $USERROOT/ $LOCALROOT || true

    BINDLIST="$LOCALROOT/overlay.list"
    BINDROOT="$LOCALROOT/overlay"

    if [ -f "$BINDLIST" ]
    then
        # Sanity check
        while read MOUNTTARGET SOURCE
        do
            MOUNTTARGET="${MOUNTTARGET%/}"
	    if [ -n "$SOURCE" ]
	    then
		MOUNTSOURCE="$BINDROOT/$SOURCE"
	    else
        	MOUNTSOURCE="$BINDROOT/${MOUNTTARGET##*/}"
	    fi
            if [ -d "$MOUNTSOURCE" -a -d "$MOUNTTARGET" ]
            then
                continue
            else
                if [ -f "$MOUNTSOURCE" -a -f "$MOUNTTARGET" ]
                then
                    continue
                else
                    echo "[$(date +'%F %T')] Mount source '$MOUNTSOURCE' or mount target '$MOUNTTARGET' does not exist or file types do not match" >> "$USERROOT"/error.log
                    exit 1
                fi
            fi
        done < "$BINDLIST"

        while read MOUNTTARGET SOURCE
        do
            MOUNTTARGET="${MOUNTTARGET%/}"
	    if [ -n "$SOURCE" ]
	    then
		MOUNTSOURCE="$BINDROOT/$SOURCE"
	    else
        	MOUNTSOURCE="$BINDROOT/${MOUNTTARGET##*/}"
	    fi
            if ! mount --bind "$MOUNTSOURCE" "$MOUNTTARGET"
            then
                echo "[$(date +'%F %T')] Unable to mount '$MOUNTSOURCE' to '$MOUNTTARGET', bailing out" >> "$USERROOT"/error.log
                f_upstart_job_stop localization
                exit 2
            fi
        done < "$BINDLIST"
    else
	[ -d "$USERROOT" ] && echo "[$(date +'%F %T')] File '$BINDLIST' missing, bailing out" >> "$USERROOT"/error.log
	exit 3
    fi
end script

post-stop script

    USERROOT="/mnt/base-us/localization"
    LOCALROOT="/var/local/localization"

    if [ -f "$USERROOT/debug.log" ]
    then
        exec 2>>"$USERROOT/debug.log"
        set -vx
    fi

    BINDLIST="$LOCALROOT/overlay.list"
    BINDROOT="$LOCALROOT/overlay"

    if [ -f "$BINDLIST" ]
    then
        while read MOUNTTARGET SOURCE
        do
            MOUNTTARGET="${MOUNTTARGET%/}"
            if ! umount "$MOUNTTARGET"
            then
                echo "[$(date +'%F %T')] Unable to umount '$MOUNTTARGET'" >> "$USERROOT"/error.log
            fi
        done < "$BINDLIST"
    fi
end script
